# -*- shell-script -*-
##############################
##############################
##
## Set environmental variables
##
##############################
##############################

# A simple prompt
PS1='[\u@\h \W]\$ '

# Misc bash settings
export HISTCONTROL=ignoredups:ignorespace
set echo-control-characters off
shopt -s expand_aliases

# Set default editor
export EDITOR="eclient"
export VISUAL="eclient"

# fix the incorrect terminal specifications
#export TERM=xterm-256color

# Completion settings
complete -cf sudo
complete -cf ssudo
complete -cf man
complete -cf until

# Auto coloring
alias ls='ls --color=auto'
alias lh='ls -lh'
alias ll='ls -l'
alias la='ls -A'
alias less='less -R'
alias lesss='less -RS'
alias rgrep='grep -R'
alias grep='grep -n --color=auto'
export GREP_COLORS='mt=0;34'

# Put the last two elements of the path as the tab title
# Based on https://gist.github.com/phette23/5270658#gistcomment-1996641
function cd() {
    builtin cd "$@"
    term.update-tab-title "$(g.describe --short) | $(util.last-two-elements-of-pwd)"
}

##############################
##############################
##
## Utility Functions
##
##############################
##############################
function util.abspath() {
    echo "$(
        cd $(dirname "$@")
        pwd -P
    )/$(basename "$@")"
}

function term.update-tab-title() {
    echo -ne "\033]0;"$*"\007"
}

function util.last-two-elements-of-pwd() {
    awk -F '/' \
        '{ if (NF >= 4) {
             printf ("../%s/%s\n",$(NF-1),$NF)
           }
           else {
             print $0
           }
         }' <<<"$PWD"
}

function util.tarball() {
    local FILE
    for FILE in "${@}"; do
        echo "===== Creating Tarball of $FILE ====="
        if tar cvvjf "${FILE%%/}.tbz2" "$FILE"; then
            echo "> Success"
            echo "> Removing old copy of $FILE"
            rm -rf "$FILE"

        else
            echo "> Failure"
            rm -f "${FILE%%/}.tbz2"

        fi
    done
}

# Based on sample from alias.sh
function util.extract() {
    local FILE
    for FILE in "${@}"; do
        if [ -f "$FILE" ]; then
            case "$FILE" in
            *.tar.bz2) tar xvjf "$FILE" ;;
            *.tar.gz) tar xvzf "$FILE" ;;
            *.bz2) bunzip2 -v "$FILE" ;;
            *.rar) unrar x -v "$FILE" ;;
            *.gz) gunzip -v "$FILE" ;;
            *.tar) tar xvf "$FILE" ;;
            *.tbz2) tar xvjf "$FILE" ;;
            *.tgz) tar xvzf "$FILE" ;;
            *.zip) unzip -v "$FILE" ;;
            *.7z) 7z x "$FILE" ;;
            *)
                echo "'$FILE' cannot be extracted via extract"
                ;;
            esac
        else
            echo "'$FILE' is not a valid file"
        fi
    done
}

function util.mid() {
    local start="$1"
    local end="$2"
    local file="$3"

    [ ! "$file" ] && file='-'

    tail -n+"$start" "$file" | head -n"$end"
}

function util.line-nums() { nl -ba "$@"; }

# Based on a directory size alias on alias.sh
# Converts bytes into higher-order representations
function util.human-number() {
    local size
    local unit
    for size in "$@"; do
        for unit in {k,M,G,T,P,E,Z,Y}; do
            if [ "$size" -lt 1024 ]; then
                echo "${size}${unit}"
                break
            fi
            size=$((size / 1024))
        done
    done
}

# Based off a sample found on commandlinefu.com
function util.find.duplicates() {
    find "$@" -not -empty -type f -printf "%s\0" |
        sort -rnz |
        uniq -dz |
        xargs -0 -I{} -n1 -P0 find "$@" -type f -size {}c -print0 |
        xargs -0 -n1 -P0 md5sum |
        sort |
        uniq -w32 --all-repeated=separate
}

function util.find.trailing-commas() {
    if [ -z "$1" ]; then
        echo >&2 'Trailing comma search only works on files, not piped input'.
        return 2
    fi
    ag ',\s*\)' "$@"
}

function util.find.non-ascii() {
    ag '[^\x00-\x7F]' "$@"
}

# Prints the top 20 disk space hogs in the current directory
function util.dirsize() {
    local root="$1/"
    [ ! "$1" ] && root='.'

    find "$root" -maxdepth 1 -not -name '.' -print0 | # Find all files in the directory
        # in $root, except '.' (we don't
        # need totals). Separate each file
        # name with a null terminator.
        xargs -0 -r -n1 -P0 du -0 -sh | # Run each file through du to get a human
        # readable summary size. Keep null as the
        # separator. Run 1 du instance per file, but
        # run as many in parallel as possible. This
        # will speed things up considerably as it is
        # mostly IO calls
        sort -hz |     # Sort by human-readable numbers, keeping null as the separator.
        tr '\0' '\n' | # Change the nulls to newlines for easy reading.
        tail -n20 |    # Only show the top 20 offenders
        sed 's|\./||'  # Remove the annoying ./ in front of the file names
}

# List 10 commands with the most open file descriptors
function util.open-descriptors-by-command() {
    lsof -n |
        tail -n+2 |
        sed -E 's/ +/ /g' |
        cut -d' ' -f1 |
        sort |
        uniq -c |
        sort -n |
        tail
}

function util.yaml2json() {
    yaml2json.compact
}

function util.yaml2json.compact() {
    ruby -ryaml -rjson -e 'puts JSON.pretty_generate(YAML.load(ARGF))'
}

function util.yaml2json.pretty() {
    ruby -ryaml -rjson -e 'puts JSON.pretty_generate(YAML.load(ARGF))'
}

function util.emoji() {
    emoji.search.bash "$@"
}

function util.emoji.copy() {
    emoji.search.bash "$@" | xcopy
}

function util.encode.url() {
    jq -sRr @uri
}

# From https://stackoverflow.com/a/70560850 and https://stackoverflow.com/a/6265305
function util.decode.url() {
    sed -e 's/\+/ /g' -e 's/%\(..\)/\\\\x\1/g' | xargs -I '{}' printf '%b\n' '{}'
}

##############################
##############################
##
## Functions for cleaning up
## input - the read from stdin and write to stdout
##
##############################
##############################

function code.format.xml() {
    xmllint --format -
}
function code.format.html() {
    xmllint --html --format -
}

# Work around for reserved HTML characters
#
# Because this is a bit of a hack, we get
# &#60; for < instead of &lt;
function code.format.html.entity() {
    printf '&#%d;' "'$1"
}

function code.format.json.pretty() {
    jq '.'
}
function code.format.json.compact() {
    jq -c '.'
}

# Not prefect, notably lacking around DDL statements
function code.format.sql() {
    docker run --rm -i \
        unibeautify/sqlformat:latest \
        -k upper \
        -i lower \
        -s -r \
        --comma_first False \
        -
}

##############################
##############################
##
## Functions for script init
##
##############################
##############################

code.bash.init() {
    if [[ ${1:-} ]]; then
        cp "$HOME/.bash-config/templates/template.bash" "$1"
        chmod 700 "$1"
    else
        cat "$HOME/.bash-config/templates/template.bash"
    fi
}

##############################
##############################
##
## Functions for background
## spawning
##
##############################
##############################
function spawn() {
    ( ("$@" 2>/dev/null >/dev/null &) &)
}

function s() { spawn "$@"; }

# Completion for background forks
complete -cf spawn
complete -cf s

##############################
##############################
##
## Command line web search
##
##############################
##############################

# Helper function to web encode a string
function webSafe() {
    echo "$@" | xxd -plain | tr -d '\n' | sed 's/\(..\)/%\1/g'
}

# Get the contents of the clipboard if there are no passed arguments
function argClip() {
    local target="$@"
    if [ ! "$target" ]; then
        target="$(xpaste)"
    fi
    echo "$target"
}

# Search argument capture
function query() { webSafe "$(argClip "$@")"; }

function force-url() {
    if [[ "$@" =~ '^https?://' ]]; then
        echo "$@"
    else
        echo 'https://'"$(sed -re 's_^.*?://__' <<<"$@")"
    fi
}

function html-header() { curl --head "$(argClip "$@")"; }

##############################
##############################
##
## Git/hub
##
##############################
##############################

function g.describe() {
    local git_dir repo branch

    git_dir=$(g.root 2>/dev/null)
    if [ $? -ne 0 ]; then
        echo 'git:-'
        return
    fi

    repo=$(basename "$git_dir")
    if [ "$1" = '--short' ]; then
        echo "git:$repo"
    else
        branch=$(g.branch)
        printf "git:%s @ %s\n" "$repo" "$branch"
    fi
}

function g.root() {
    local git_dir
    git_dir=$(git rev-parse --git-dir 2>/dev/null)
    if [ $? -eq 0 ]; then
        dirname "$git_dir"
    else
        return $?
    fi
}
function g.root.cd() { cd "$(g.root)"; }

function g.add() { git add "$@"; }
function g.rm() { git rm "$@"; }

function g.ci() { git commit "$@"; }
function g.ci.skip-checks() { git commit --no-verify "$@"; }
function g.ci.ammend() { git commit --amend "$@"; }
function g.ci.ammend.preserve-message() { g.ci.ammend --no-edit "$@"; }

function g.co() { git checkout "$@"; }
function g.co.main() { git checkout "$(g.branch.main)" "$@"; }

function g.branch() { git branch "$@"; }
function g.branch.name() { git symbolic-ref HEAD 2>/dev/null | sed -e 's/refs\/heads\///'; }
function g.branch.main() {
    local remote
    remote=${1:-origin}
    git rev-parse --abbrev-ref "$remote"/HEAD |
        jq --raw-input --raw-output \
            --arg remote "$remote" \
            'split("\($remote)/")[1:]|join("\($remote)/")'
}
function g.branch.statuses() { git branch -vv; }
function g.branch.reset-upstream() { git branch --set-upstream-to=origin/"$(g.branch.name)" "$@"; }
function g.branch.create() { git checkout -b "$@"; }
function g.branch.delete() { git branch -D "$@"; }
function g.branch.delete.current() {
    local to_delete
    to_delete=$(g.branch.name)
    git reset --hard HEAD && g.co.main && g.branch.delete "$to_delete"
}

function g.cherry-pick() { git cherry-pick "$@"; }
function g.cherry-pick.skip() { git cherry-pick --skip; }
function g.cherry-pick.abort() { git cherry-pick --abort; }
function g.cherry-pick.continue() { git cherry-pick --continue; }

function g.rebase.interactive() { git rebase --interactive "$@"; }
function g.rebase.skip() { git rebase --skip; }
function g.rebase.abort() { git rebase --abort; }
function g.rebase.continue() { git rebase --continue; }

function g.log() { git log "$@"; }
function g.log.only-changed-files() { git log --summary --name-only "$@"; }
function g.log.lola() { g.log.tree --all "$@"; }
function g.log.tree() {
    git log --graph --pretty=format:'%C(red)%h%C(reset) %C(blue)%<(12)%ar%C(reset) %C(auto)%d %s' "$@"
}

function g.status() { git status "$@"; }

function g.diff() { git diff --ignore-space-at-eol "$@"; }
function g.diff.staged() { g.diff --staged "$@"; }
function g.diff.include-whitespace() { git diff "$@"; }

function g.show() { git show --ignore-space-at-eol "$@"; }
function g.show.only-changed-files() { git show --summary --name-only "$@"; }
function g.show.include-whitespace() { git show "$@"; }

function g.upstream-url() {
    git remote get-url --push origin |
        sed \
            -e 's_git@_https://_' \
            -e 's_\.com:_.com/_' \
            -e 's_\.git$__'
}

function g.github() {
    local url=$(g.upstream-url)

    if [ "x$url" != "x" ]; then
        open "${url}/tree/$(g.branch)"
    else
        open "https://github.com/morgen-peschke?tab=repositories"
    fi
}

function g.github.pull-request.url() {
    if [ "$1" ]; then
        echo "$(g.upstream-url)/compare/$1...$(g.branch.name)?expand=1"
    else
        echo "$(g.upstream-url)/pull/new/$(g.branch.name)"
    fi
}

function g.github.pull-request.create.skip-push() {
    open "$(g.github.pull-request.url "$@")"
}

function g.github.pull-request.create () {
    g.push.set-upstream && open "$(g.github.pull-request.url "$@")"
}

function g.github.commit.url() {
    echo "$(g.upstream-url)/commits/$(git rev-parse HEAD)"
}

function g.github.auth.reject() {
    git credentials reject <<EOF
protocol=https
host=github.com
EOF
    git credentials reject <<EOF
protocol=ssh
host=github.com
EOF
}

function g.serve() {
    git daemon --reuseaddr --base-path=. --export-all --verbose --informative-errors
}

# Note: cannot write to current server branch
function g.serve.writable() {
    git daemon --reuseaddr --base-path=. --export-all --verbose --informative-errors --enable=receive-pack
}

function g.pull() { git pull "$@"; }
function g.push() { git push origin "HEAD:$(g.branch.name)" "$@"; }
function g.push.tags() { git push --tags origin "$@"; }
function g.push.set-upstream() { g.push --set-upstream "$@"; }

function g.fetch() { git fetch "$@"; }
function g.fetch.include-tags() { git fetch --tags "$@"; }
function g.sync() { git fetch --prune --prune-tags "$@"; }
function g.sync.pull() { g.sync && git pull; }
function g.sync.branch {
    local added_stash initial_branch target_branch retval
    target_branch="$1"
    initial_branch=$(g.branch.name)
    if [[ $(git status --porcelain 2>/dev/null | wc -l) -eq 0 ]]; then
        added_stash=true
        git stash --include-untracked
    else
        added_stash=false
    fi

    g.sync && git checkout "$target_branch" && git pull
    retval=$?
    if [[ $retval -ne 0 ]]; then
        printf >&2 \
            'Failed to sync %s (%s).\nPress [enter] to attempt to revert to branch %s or ^C to quit\n' \
            "$target_branch" "$retval" "$initial_branch"
        read
        git reset --hard HEAD
    fi
    git checkout "$initial_branch"
    if [[ "$added_stash" = 'true' ]]; then
        git stash pop
    fi
    return $retval
}

function g.merge() { git merge --no-ff "$@"; }

function g.stash () { git stash push "$@"; }
function g.stash.list() { git stash list "$@"; }
function g.stash.drop() { git stash drop "$@"; }
function g.stash.clear() { git stash clear "$@"; }
function g.stash.pop() { git stash pop "$@"; }
function g.stash.pop.to-branch() {
    local branchName="$1"
    shift
    git stash branch "$branchName" "$@"
}

function g.clean.nuke-everything () { git clean -xdf "$@"; }

##############################
##############################
##
## Language-specific helpers
##
##############################
##############################

function util.ruby.load() {
    source "$HOME"/.bash-config/language-specific-stuff/ruby
}

function util.scala.mill.regenerate-intellij() {
    mill mill.scalalib.GenIdea/idea
}

function util.scala.mill.convert.sbt-dependency() {
    \sed -E -e 's/" +(%+) +"/\1/g' -e 's/%/:/g' -e 's/^"/ivy"/g'
}

function util.scala.sbt.convert.mill-ivy-dependency() {
    \sed -E -e 's/" +(%+) +"/\1/g' -e 's/%/:/g' -e 's/^"/ivy"/g'
}

##############################
##############################
##
## Docker
##
##############################
##############################

function docker.running() {
    docker ps --format '{{.ID}} {{.Names}}'
}

function docker.cleanup.containers() {
    docker ps -aqf status=exited | xargs -r docker rm -v
}

function docker.cleanup.images() {
    docker images -qf dangling=true | xargs -r docker rmi
}

function docker.cleanup.all() {
    docker.cleanup.containers &&
        docker.cleanup.images
}

##############################
##############################
##
## Helm / k8s
##
##############################
##############################

function _helm_autocomplete_install() {
    if ((${#COMP_WORDS[@]} == 2)); then
        local dependencies=$(helm dependency list |
            awk 'NF {if ($1 != "NAME") { print $1 }}')

        COMPREPLY=($(compgen -W "$dependencies" -- "${COMP_WORDS[1]}"))
    fi
}

function helm.install {
    local chart="$1"
    local release="helm-$chart"
    shift

    (
        set -x
        helm install "$release" . --wait -f values-dev.yaml --set "$chart".enabled=true "$@"
    )
}

complete -F _helm_autocomplete_install helm.install

function helm.upgrade {
    local chart="$1" release
    shift

    if [ "$1" ]; then
        release="$1"
    else
        release="helm-$chart"
    fi

    (
        set -x
        helm upgrade --install "$release" . --wait -f values-dev.yaml --set "$chart".enabled=true "$@"
    )
}

function _helm_autocomplete_upgrade() {
    if ((${#COMP_WORDS[@]} == 2)); then
        local dependencies=$(helm dependency list |
            awk 'NF {if ($1 != "NAME") { print $1 }}')

        COMPREPLY=($(compgen -W "$dependencies" -- "${COMP_WORDS[1]}"))
    elif ((${#COMP_WORDS[@]} == 3)); then
        local releases=$(helm list |
            awk 'NF {if ($1 != "NAME") { print $1 }}')

        COMPREPLY=($(compgen -W "$releases" -- "${COMP_WORDS[2]}"))
    fi
}

complete -F _helm_autocomplete_upgrade helm.upgrade

function helm.uninstall.all {
    helm ls --short | xargs helm uninstall
}

function helm.status {
    kubectl get pods
}

##############################
##############################
##
## SBT
##
##############################
##############################

function sbt.linters() {
    sbt.scoverage "$@"
    sbt.scapegoat "$@"
}

function sbt.scapegoat() {
    # `scapegoatClean' is done separately as a check to ensure we're in a
    # directory which has both sbt and scapegoat
    sbt scapegoatClean && {
        if [ -n "$1" ]; then
            for project in "$@"; do
                sbt "$project"/scapegoat
            done
        else
            sbt scapegoat
        fi
        find -name scapegoat.html -execdir "$BROWSER" '{}' \;
    }
}

function sbt.scoverage() {
    if [ -n "$1" ]; then
        for project in "$@"; do
            sbt coverage "$project"/test "$project"/coverageReport
        done
    else
        sbt coverage test coverageReport
    fi
    sbt.scoverage.open-reports "$@"
}

function sbt.scoverage.open-reports() {
    if [ -n "$1" ]; then
        for project in "$@"; do
            find "$project" -name "scoverage-report" -execdir "$BROWSER" '{}'/index.html \;
        done
    else
        find -name "scoverage-report" -execdir "$BROWSER" '{}'/index.html \;
    fi
}

##############################
##############################
##
## Upsource
##
##############################
##############################

function __upsource.comment-link.extract-filename-and-comment-id() {
    local url="$1" raw_url query_string review filepath filename comment
    query_string=$(\cut -d'?' -f2- <<<"$url")
    filepath=$(\sed -E -e 's/.*filePath=([^&]+)/\1/' <<<"$query_string")
    filename=$(\basename "$filepath")
    comment=$(\sed -E -e 's/.*commentId=([^&]+).*/\1/' <<<"$query_string")

    echo "comment $comment on $filename"
}

function __upsource.comment-link.extract-review-filename-and-comment-id() {
    local url="$1" raw_url query_string review filepath filename comment
    raw_url=$(\cut -d'?' -f1 <<<"$url")
    query_string=$(\cut -d'?' -f2- <<<"$url")
    review=$(\basename "$raw_url")
    filepath=$(\sed -E -e 's/.*filePath=([^&]+)/\1/' <<<"$query_string")
    filename=$(\basename "$filepath")
    comment=$(\sed -E -e 's/.*commentId=([^&]+).*/\1/' <<<"$query_string")

    echo "comment $comment on $filename in $review"
}

##############################
##############################
##
## Atlassian Products : these read from stdin and write to stdout
##
##############################
##############################

# Implementation detail: builds a pretty representation of ticket and comment
# from a JIRA comment permalink
function __atlassian.jira.comment-link.extract-ticket-and-comment-number() {
    local url="$1" ticket_and_comment ticket comment
    ticket_and_comment=$(basename "$url")
    ticket=$(\cut -d'?' -f1 <<<"$ticket_and_comment")
    comment=$(\sed -E -e 's/.*focusedCommentId=([[:digit:]]+).*/\1/' <<<"$ticket_and_comment")
    echo "comment $comment in $ticket"
}

# Implementation detail: common code for atlassian's url markup
function __atlassian.url.format() {
    local url="$1"
    shift
    echo "[$@|$url]"
}

# Uses the last part of a URL as it's display text.
#
# EX: http://example.com/foo becomes [foo|http://example.com/foo]
function atlassian.url.format.last() {
    local url last
    while IFS= read -r url || [[ -n "$url" ]]; do
        last=$(basename "$url" | cut -d'?' -f1)
        __atlassian.url.format "$url" "$@$last"
    done
}

# Attempts to pretty-print the comment number and ticket number
# for a JIRA link
function atlassian.url.format.jira-comment() {
    local url
    while IFS= read -r url || [[ -n "$url" ]]; do
        __atlassian.url.format \
            "$url" \
            "$(__atlassian.jira.comment-link.extract-ticket-and-comment-number "$url")"
    done
}

function atlassian.url.format.upsource-comment() {
    local url
    while IFS= read -r url || [[ -n "$url" ]]; do
        __atlassian.url.format \
            "$url" \
            "$(__upsource.comment-link.extract-review-filename-and-comment-id "$url")"
    done
}

# Implementation detail: common code for opening an Atlassian block's markup
function __atlassian.block.open() {
    local block="$1"
    shift
    local language="$1"
    shift
    if [ -z "$language" ]; then
        if [ $# -eq 0 ]; then
            echo "{$block}"
        else
            echo "{$block:title=$@}"
        fi
    else
        if [ $# -eq 0 ]; then
            echo "{$block:$language}"
        else
            echo "{$block:$language|title=$@}"
        fi
    fi
}

# Implementation detail: common code for closing an Atlassian block's markup
function __atlassian.block.close() {
    echo -e "\n{$1}"
}

# Implementation detail: this got tedious to write
function __atlassian.code.open() { __atlassian.block.open code "$@"; }
function __atlassian.code.close() { __atlassian.block.close code "$@"; }

# Wrap a block of SQL in a code block
#
# Does not format the SQL
#
# Any arguments are assumed to be the intended title of the block
function atlassian.code.sql() {
    __atlassian.code.open sql "$@"
    cat -
    __atlassian.code.close
}

# Wrap a block of Scala code in a code block
#
# Does not format the code
#
# Any arguments are assumed to be the intended title of the block
function atlassian.code.scala() {
    __atlassian.code.open scala "$@"
    cat -
    __atlassian.code.close
}

# Wrap a block of JSON in a code block
#
# Does not format the JSON
#
# Any arguments are assumed to be the intended title of the block
function atlassian.code.json() {
    __atlassian.code.open json "$@"
    cat -
    __atlassian.code.close
}

# Wrap a block of JSON in a code block
#
# Pretty-prints the JSON (preferable if you have the space)
#
# Any arguments are assumed to be the intended title of the block
function atlassian.code.json.pretty() {
    __atlassian.code.open json "$@"
    code.format.json.pretty
    __atlassian.code.close
}

# Wrap a block of JSON in a code block
#
# Compacts the JSON (preferable if you are running out of characters in a comment)
#
# Any arguments are assumed to be the intended title of the block
function atlassian.code.json.compact() {
    __atlassian.code.open json "$@"
    code.format.json.compact
    __atlassian.code.close
}

# Wrap any other code type, expects thet language as the first argument
#
# Use `''` as the first argument if no language should be specified
#
# Any arguments after the first are assumed to be the intended title of the block
function atlassian.code.other() {
    __atlassian.code.open "$@"
    cat -
    __atlassian.code.close
}

# Wrap up arbitrary fixed-width text, useful for log messages
#
# Don't use atlassian.code.other for log messages, as it breaks JIRA's formatter
#
# Any arguments are assumed to be the intended title of the block
function atlassian.noformat() {
    __atlassian.block.open noformat '' "$@"
    cat -
    __atlassian.block.close noformat
}

# Wrap up markup in a panel
#
# Any arguments are assumed to be the intended title of the block
function atlassian.panel() {
    __atlassian.block.open panel '' "$@"
    cat -
    __atlassian.block.close panel
}

function atlassian.headers.evidence-of-dev-test-comment() {
    local identifier=''
    if [ "$1" ]; then
        identifier=$(echo " :: $@")
    fi
    echo "h3. Evidence of Dev Test$identifier"
}

##############################
##############################
##
## Markdown
##
##############################
##############################

function __markdown.url.format() {
    local url="$1"
    shift
    echo "[$@]($url)"
}

function markdown.url.format.last() {
    local url last
    while IFS= read -r url || [[ -n "$url" ]]; do
        last=$(basename "$url" | cut -d'?' -f1)
        __markdown.url.format "$url" "$last"
    done
}

function markdown.url.format.jira-comment() {
    local url
    while IFS= read -r url || [[ -n "$url" ]]; do
        __markdown.url.format \
            "$url" \
            "$(__atlassian.jira.comment-link.extract-ticket-and-comment-number "$url")"
    done
}

function markdown.url.format.upsource-comment() {
    local url
    while IFS= read -r url || [[ -n "$url" ]]; do
        __markdown.url.format \
            "$url" \
            "$(__upsource.comment-link.extract-filename-and-comment-id "$url")"
    done
}

function markdown.url.format.upsource-comment.include-review-name() {
    local url
    while IFS= read -r url || [[ -n "$url" ]]; do
        __markdown.url.format \
            "$url" \
            "$(__upsource.comment-link.extract-review-filename-and-comment-id "$url")"
    done
}

##############################
##############################
##
## UUID
##
##############################
##############################

function uuid.str-to-hex-literal() {
    local line
    while IFS= read -r line || [[ -n "$line" ]]; do
        echo -n '0x'
        tr -d '-' <<<"$line"
    done
}

function uuid.random-lower-case() { uuidgen | tr A-Z a-z | tr -d '\n'; }

##############################
##############################
##
## S3
##
##############################
##############################

function combine-file-starting-with() {
    local target="$1"

    find "$(dirname "$target")" \
        -type f \
        -name "$(basename "$target")"'*' \
        -execdir cat {} \;
}

##############################
##############################
##
## JWT
##
##############################
##############################

_BASE64_DECODER=(base64 -d)                                    # option -d for Linux base64 tool
base64 -d &>/dev/null <<<"AAAA" || _BASE64_DECODER=(base64 -D) # option -D on MacOS

_jwt.decode_base64() {
    tr '_-' '/+' |
        perl -MMIME::Base64=decode_base64 \
            -ne 'print decode_base64 $_, "\n"' |
        jq -c --slurp '{header: .[0], footer: .[1]}'
}

jwt.decode() {
    cut -d'.' -f-2 |
        tr '.' "\n" |
        _jwt.decode_base64_url |
        jq 'def render(x): if .[x] then .[x+"Str"] = (.[x]|todate) else . end;
            def addRendered: render("iat") | render("exp") | render("nbf");
            {header: .header, footer: .footer|addRendered}'
}

jwt.decode.header() {
    jwt.decode | jq '.header'
}

jwt.decode.footer() {
    jwt.decode | jq '.footer'
}

##############################
##############################
##
## Aliases
##
##############################
##############################

##### Defaults
function e() { spawn "$EDITOR" "$@"; }
function bcal() { bc -l "$@"; }

##### Fork functions
alias keepassx='spawn keepassx'

function sman() { st man "$@"; }
function shelp() { sl help "$@"; }
function sinfo() { st info "$@"; }

##### Web functiones
alias gdocs='open drive.google.com'
alias gcal='open https://www.google.com/calendar/'
alias gmail='open https://mail.google.com'
alias gplus='open https://plus.google.com'

alias weather='curl "http://www.weather.com/weather/today/95037"'
alias weathernow='curl "http://www.weather.com/weather/right-now/95037"'

##### Lazy functiones
alias ag-literal='ag -Qs'
alias ag-unicode='ag "[\x80-\xFF]"'
alias cl='cleanout'

function today() { date +"%Y%m%d"; }
function todaynice() { date +"%Y/%m/%d"; }

alias simpleServer='python -m SimpleHTTPServer'

function dropsudo() { sudo -k "$@"; }
